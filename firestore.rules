rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isMentor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'mentor';
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users: Can be read by anyone, but only written by the owner or an admin.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Events: Publicly readable, but only writeable by mentors or admins.
    match /events/{eventId} {
      allow read: if true;
      allow create, update, delete: if isMentor() || isAdmin();
    }

    // Event RSVPs: Can be read by anyone, but only created/deleted by the authenticated user.
    match /event_rsvps/{rsvpId} {
      allow read: if isSignedIn();
      allow create, delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false; // RSVPs shouldn't be updated, only created/deleted
    }

    // Stories: Publicly readable, writeable only by the author.
    match /stories/{storyId} {
      allow read: if true;
      allow create, update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isOwner(request.resource.data.userId) || isAdmin();
    }

    // Mentorships: Only involved parties (user/mentor) or admins can access.
    match /mentorships/{mentorshipId} {
      allow read, write: if isSignedIn() && (request.auth.uid in [resource.data.userId, resource.data.mentorId] || isAdmin());
    }

    // Messages: Only the sender or recipient can access.
    match /messages/{messageId} {
      // For queries, we check the collection. For direct access, the document.
      allow list: if isSignedIn() && (request.auth.uid == request.query.to || request.auth.uid == request.query.from);
      allow read, write: if isSignedIn() && (request.auth.uid in [resource.data.from, resource.data.to]);
    }

    // Notifications: Only the recipient can read/write their own notifications.
    match /notifications/{userId}/user_notifications/{notificationId} {
      allow read, write, delete: if isOwner(userId);
    }

    // Mood Logs: Only the owner can access their logs.
    match /mood_logs/{userId}/logs/{logId} {
      allow read, write, create, delete: if isOwner(userId);
    }
    
    // Settings: Only the owner can access their settings.
    match /settings/{userId} {
       allow read, create, update, delete: if isOwner(userId);
    }
  }
}
