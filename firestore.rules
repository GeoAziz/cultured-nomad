rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- COLLECTIONS ---

    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId); // Allows users to create their own doc on signup
      allow update: if isOwner(userId) || isAdmin(); // Only user or admin can update
      allow delete: if isAdmin(); // Only admins can delete users
    }

    // Events are public to all signed-in users. Writing events would be an admin function (not built yet).
    match /events/{eventId} {
      allow read: if isSignedIn();
      // allow write: if isAdmin(); // Future rule
    }

    // Users can RSVP for themselves.
    match /event_rsvps/{rsvpId} {
      allow read, create, delete: if isSignedIn() && rsvpId.startsWith(request.auth.uid);
    }
    
    // Messages can only be read by participants, and only created by the sender.
    match /messages/{messageId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.from;
    }
    
    // Stories can be read by any signed-in user. Users can only create stories for themselves.
    match /stories/{storyId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Liking/commenting would have their own rules
      // allow update (likes): if isSignedIn(); 
    }

    // Mentorship requests can only be read by participants, and created by the requesting user.
    match /mentorships/{mentorshipId} {
      allow read, update: if isSignedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.mentorId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Users can only manage their own mood logs.
    match /mood_logs/{userId}/logs/{logId} {
        allow read, create: if isOwner(userId);
    }

    // Broadcasts are read-only for clients. Created via backend function.
    match /broadcasts/{broadcastId} {
        allow read: if isSignedIn();
        allow write: if false; // Must be created via trusted backend
    }

    // Notifications are private to each user.
    match /notifications/{userId}/user_notifications/{notificationId} {
        allow read, update: if isOwner(userId); // Users can read/mark as read
    }

    // Feedback can be created by any authenticated user. Read by admins.
    match /feedback/{feedbackId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }
    
    // Services can be read by anyone, but writes are restricted.
    match /services/{serviceId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin(); // Or service owner, if applicable
    }
  }
}
